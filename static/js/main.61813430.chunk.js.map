{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ClientKey","Key","props","field","valueField","bind","search","state","images","fetch","then","res","json","jsonRes","console","log","setState","this","results","ev","target","value","map","i","src","urls","thumb","alt","key","id","className","onClick","type","placeholder","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kPAIMA,G,YAAY,oEAwHHC,E,YAnHZ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACCC,MAAO,GACZ,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBAEd,EAAKE,MAAO,CACVC,OAAO,IAPK,E,iFAWG,IAAD,OAEnBC,MAAM,2DAAD,OAA4DT,IAEhEU,KAAK,SAAAC,GACJ,OAAOA,EAAIC,SACZF,KAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZR,OAAQK,Q,+BAKJ,IAAD,OACJJ,MAAM,GAAD,OA9BK,yCA8BL,gCAAoCQ,KAAKd,MAAzC,sBAA4DH,IAC5DU,KAAK,SAAAC,GACF,OAAOA,EAAIC,SACZF,KAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZR,OAAQK,EAAQK,c,iCAKnBC,GACPF,KAAKd,MAAQgB,EAAGC,OAAOC,Q,+BAI9B,OAAOJ,KAAKV,MAAMC,OAAOc,IAAI,SAAAC,GAC3B,OAAO,yBAAKC,IAAKD,EAAEE,KAAKC,MAAOC,IAAI,kBAAkBC,IAAKL,EAAEM,S,+BAMvD,OACI,oCACC,gCACG,yBAAKC,UAAU,iBACd,wBAAIA,UAAU,YACd,4BACE,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,uBAIf,4BACA,yBAAKA,UAAU,oBACb,4BAAQC,QAASd,KAAKX,QAAQ,uBAAGwB,UAAU,mBAC3C,2BAAOE,KAAK,OAAOC,YAAY,SAASC,SAAUjB,KAAKb,aACvD,gCAAQ,uBAAG0B,UAAU,kBACrB,yBAAKA,UAAU,aAAf,kBACA,gCAAQ,uBAAGA,UAAU,4BAKzB,4BACE,yBAAKA,UAAU,qBACb,uBAAGA,UAAU,0BAGjB,4BACE,yBAAKA,UAAU,kBACf,uBAAGA,UAAU,oBAGf,4BACE,yBAAKA,UAAU,qBAAf,MAIF,4BACE,yBAAKA,UAAU,oBACb,uBAAGA,UAAU,0BAGjB,4BACE,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,kBAGjB,4BACE,yBAAKA,UAAU,sBACb,uBAAGA,UAAU,2BAMrB,iCACE,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,iBACZb,KAAKT,iB,GA7GJ2B,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC,gB","file":"static/js/main.61813430.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport '../node_modules/@fortawesome/fontawesome-free/css/all.css';\n\nconst ClientKey = '7df746a39c7d1e29b2c68278355a50da016e7e94816ebfd676628c4456dbc917';\nconst pathBase = 'https://api.unsplash.com/search/photos';\n\nclass Key extends React.Component{\n\n   constructor(props){\n     super(props)\n       this.field ='';\n       this.valueField = this.valueField.bind(this);\n       this.search = this.search.bind(this);\n\n       this.state= {\n         images:[]\n       }\n   }\n\n   componentDidMount() {\n\n    fetch(`https://api.unsplash.com/photos?per_page=1000&client_id=${ClientKey}`)\n\n    .then(res=>{\n      return res.json()\n  }).then(jsonRes=>{\n      console.log(jsonRes);\n      this.setState({\n        images: jsonRes\n      })\n  })\n}\n\n   search(){\n       fetch(`${pathBase}?per_page=1000&query=${this.field}&client_id=${ClientKey}`)\n           .then(res=>{\n               return res.json()\n           }).then(jsonRes=>{\n               console.log(jsonRes);\n               this.setState({\n                 images: jsonRes.results\n               })\n           })\n   }\n\n   valueField(ev){\n       this.field = ev.target.value;\n   }\n\n   images(){\nreturn this.state.images.map(i=>{\n  return <img src={i.urls.thumb} alt=\"No hay imagenes\" key={i.id} />\n   \n})\n   }\n\n   render(){\n       return (\n           <>\n            <header>\n               <nav className=\"nav-container\">\n                <ul className=\"list-nav\">\n                <li>\n                  <div className=\"logo-container\">\n                    <i className=\"fab fa-pinterest\"></i>\n                  </div>\n                </li>\n                \n                  <li>\n                  <div className=\"search-container\">  \n                    <button onClick={this.search}><i className=\"fas fa-search\"></i></button>\n                    <input type='text' placeholder=\"Buscar\" onChange={this.valueField}/>\n                    <button><i className=\"fas fa-times\"></i></button>\n                    <div className=\"all-pines\">Todos los pines\n                    <button><i className=\"fas fa-chevron-down\"></i></button>\n                    </div>\n                    </div>\n                  </li>\n              \n                <li>\n                  <div className=\"friends-container\">\n                    <i className=\"fas fa-user-friends\"></i>\n                  </div>\n                </li>\n                <li>\n                  <div className=\"user-container\">\n                  <i className=\"fas fa-circle\"></i>\n                  </div>\n                </li>\n                <li>\n                  <div className=\"divisor-container\">\n                    |\n                  </div>\n                </li>\n                <li>\n                  <div className=\"coment-container\">\n                    <i className=\"fas fa-comment-dots\"></i>\n                  </div>\n                </li>\n                <li>\n                  <div className=\"bell-container\">\n                    <i className=\"fas fa-bell\"></i>\n                  </div>\n                </li>\n                <li>\n                  <div className=\"ellipsis-container\">\n                    <i className=\"fas fa-ellipsis-h\"></i>\n                  </div>\n                </li>\n                </ul>\n              </nav>\n            </header>\n            <section>\n              <div className=\"center-container\"> \n              <div className=\"img-container\">\n                {this.images()}\n              </div>\n              </div> \n            </section> \n           </>\n       )\n   }\n}\nexport default Key;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Key from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Key />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}