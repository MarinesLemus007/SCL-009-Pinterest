{"version":3,"sources":["Modal.js","App.js","serviceWorker.js","index.js"],"names":["Modal","isModalOpen","onClose","urlImg","classNameModal","className","src","alt","onClick","ClientKey","Key","props","fetchData","state","numLimit","numStart","setState","fetch","then","res","json","jsonRes","console","log","images","concat","closeModal","field","valueField","bind","search","openModal","toggleClass","offToggleClass","active","this","results","ev","target","value","map","i","urls","thumb","key","id","onMouseLeave","type","placeholder","onChange","dataLength","length","next","hasMore","loader","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRAoCeA,EAlCD,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,OAC5BC,EAAgBH,EAAa,sBAAuB,qBAC1D,OACI,yBAAKI,UAAWD,GACZ,6BAASC,UAAU,cACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,kBACX,uBAAGA,UAAU,uBAEjB,yBAAKA,UAAU,cACX,4BAAQA,UAAU,cAAa,uBAAGA,UAAU,iBAAb,IAA8B,uCAC7D,4BAAQA,UAAU,YAAW,uBAAGA,UAAU,oBAAb,IAAiC,0CAGtE,yBAAKA,UAAU,aACX,yBAAKC,IAAKH,EAAQI,IAAI,gBAG7B,yBAAKF,UAAU,eACZ,yBAAKA,UAAU,kBACX,4BAAQA,UAAU,eAAeG,QAASN,GAAS,uBAAGG,UAAU,oBAGvE,yBAAKA,UAAU,eACZ,yBAAKA,UAAU,cACX,uBAAGA,UAAU,iBAEjB,yBAAKA,UAAU,kBACX,uBAAGA,UAAU,wB,8BCxB3BI,EAAY,mEA4LHC,E,YAxLb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KA+BRC,UAAU,WAAK,IAAD,EACkB,EAAKC,MAA5BC,EADK,EACLA,SAAWC,EADN,EACMA,SAClB,EAAKC,SAAS,CAACD,SAAU,EAAKF,MAAME,SAAWD,IAC/CG,MAAM,4CAAD,OAA6CH,EAA7C,sBAAmEL,EAAnE,YAAgFM,IACpFG,KAAK,SAAAC,GACJ,OAAOA,EAAIC,SACVF,KAAK,SAAAG,GACNC,QAAQC,IAAIF,GACZ,EAAKL,SAAS,CACZQ,OAAQ,EAAKX,MAAMW,OAAOC,OAAOJ,QAzCrB,EAsFlBK,WAAY,WACV,EAAKV,SAAS,CAAEf,aAAa,KArF3B,EAAK0B,MAAO,GACZ,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBACd,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBACjB,EAAKH,WAAa,EAAKA,WAAWG,KAAhB,gBAClB,EAAKG,YAAa,EAAKA,YAAYH,KAAjB,gBAClB,EAAKI,eAAgB,EAAKA,eAAeJ,KAApB,gBACrB,EAAKhB,MAAO,CACVqB,QAAQ,EACRV,OAAO,GACPvB,aAAa,EACbE,OAAO,GACPW,SAAS,IACTC,SAAS,GAfG,E,iFAmBG,IAAD,SACYoB,KAAKtB,MAA5BC,EADW,EACXA,SAAWC,EADA,EACAA,SAClBE,MAAM,4CAAD,OAA6CH,EAA7C,sBAAmEL,EAAnE,YAAgFM,IACpFG,KAAK,SAAAC,GACJ,OAAOA,EAAIC,SACVF,KAAK,SAAAG,GACNC,QAAQC,IAAIF,GACZ,EAAKL,SAAS,CACZQ,OAAQH,Q,+BAmBL,IAAD,OACNJ,MAAM,GAAD,OAlDQ,yCAkDR,gCAAoCkB,KAAKR,MAAzC,sBAA4DlB,IAChES,KAAK,SAAAC,GACJ,OAAOA,EAAIC,SACVF,KAAK,SAAAG,GACNC,QAAQC,IAAIF,GACZ,EAAKL,SAAS,CACZQ,OAAQH,EAAQe,c,iCAKXC,GACTF,KAAKR,MAAQU,EAAGC,OAAOC,Q,+BAGhB,IAAD,OACN,OACEJ,KAAKtB,MAAMW,OAAOgB,IAAI,SAAAC,GACpB,OACE,oCACA,4BAAQpC,UAAU,aAChBG,QAAS,kBAAI,EAAKuB,UAAUU,EAAEC,KAAKC,SACnC,yBACArC,IAAKmC,EAAEC,KAAKC,MACZpC,IAAI,YACJqC,IAAKH,EAAEI,W,gCAQP1C,GACRmB,QAAQC,IAAIpB,GACZgC,KAAKnB,SAAS,CAACf,aAAa,IAC5BkC,KAAKnB,SAAS,CAACb,OAAQA,M,oCAQvBgC,KAAKnB,SAAS,CAAEkB,QAAQ,M,uCAIxBC,KAAKnB,SAAS,CAAEkB,QAAQ,M,+BAItB,OACE,oCACA,gCACE,yBAAK7B,UAAU,iBACb,wBAAIA,UAAU,YAEZ,4BACE,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,uBAIjB,4BACI,yBAAKA,UAAU,oBACb,yBAAKA,UAAW8B,KAAKtB,MAAMqB,OAAS,gBAAiB,KACnD1B,QAAS2B,KAAKH,YAAac,aAAcX,KAAKF,gBAC9C,4BAAQzB,QAAS2B,KAAKL,QAAQ,uBAAGzB,UAAU,mBAC3C,2BAAO0C,KAAK,OAAOC,YAAY,SAASC,SAAUd,KAAKP,aACvD,gCAAQ,uBAAGvB,UAAU,mBAEvB,yBAAKA,UAAU,aAAf,kBACE,gCAAQ,uBAAGA,UAAU,4BAK7B,4BACE,yBAAKA,UAAU,qBACb,uBAAGA,UAAU,0BAIjB,4BACE,yBAAKA,UAAU,kBACf,uBAAGA,UAAU,oBAIf,4BACE,yBAAKA,UAAU,qBAAf,MAKF,4BACE,yBAAKA,UAAU,oBACb,uBAAGA,UAAU,0BAIjB,4BACE,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,kBAIjB,4BACE,yBAAKA,UAAU,sBACb,uBAAGA,UAAU,2BAQvB,iCACE,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,iBACb,kBAAC,IAAD,CACE6C,WAAYf,KAAKtB,MAAMW,OAAO2B,OAC9BC,KAAMjB,KAAKvB,UACXyC,SAAS,EACTC,OAAQ,uBAAGjD,UAAU,oBAEpB8B,KAAKX,aAKd,kBAAC,EAAD,CAAOvB,YAAakC,KAAKtB,MAAMZ,YAAaE,OAAQgC,KAAKtB,MAAMV,OAAQD,QAASiC,KAAKT,kB,GApL3E6B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC,iB","file":"static/js/main.380700df.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Modal = ({isModalOpen, onClose, urlImg}) =>{\r\n    const classNameModal= isModalOpen? \"modal display-block\": \"modal display-none\";\r\n    return(\r\n        <div className={classNameModal}>\r\n            <section className=\"modal-body\">\r\n                <nav className=\"nav-modal\">\r\n                    <div className=\"ellipsis-modal\">\r\n                        <i className=\"fas fa-ellipsis-h\"></i>\r\n                    </div>\r\n                    <div className=\"nav-button\">\r\n                        <button className=\"nav-upload\"><i className=\"fas fa-upload\"> <p>Enviar</p></i></button>\r\n                        <button className=\"nav-pine\"><i className=\"fas fa-thumbtack\"> <p>Guardar</p></i></button>\r\n                    </div>\r\n                </nav>\r\n                <div className=\"modal-img\">\r\n                    <img src={urlImg} alt=\"Not Fount\"/>    \r\n                </div>   \r\n            </section>\r\n             <div className=\"times-modal\">\r\n                <div className=\"content-button\">\r\n                    <button className=\"times-button\" onClick={onClose}><i className=\"fas fa-times\"></i></button>\r\n                </div>\r\n             </div>\r\n             <div className=\"last-button\">\r\n                <div className=\"plus-modal\">\r\n                    <i className=\"fas fa-plus\"></i>\r\n                </div>\r\n                <div className=\"question-modal\">\r\n                    <i className=\"fas fa-question\"></i>\r\n                </div>\r\n             </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Modal;","import React from 'react';\nimport Modal from './Modal';\nimport './App.css';\nimport '../node_modules/@fortawesome/fontawesome-free/css/all.css';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nconst ClientKey = '7df746a39c7d1e29b2c68278355a50da016e7e94816ebfd676628c4456dbc917';\nconst pathBase = 'https://api.unsplash.com/search/photos';\n\nclass Key extends React.Component{\n  constructor(props){\n    super(props);\n      this.field ='';\n      this.valueField = this.valueField.bind(this);\n      this.search = this.search.bind(this);\n      this.openModal = this.openModal.bind(this);\n      this.closeModal = this.closeModal.bind(this);\n      this.toggleClass= this.toggleClass.bind(this);\n      this.offToggleClass= this.offToggleClass.bind(this);\n      this.state= {\n        active: false,\n        images:[],\n        isModalOpen: false,\n        urlImg:\"\",\n        numLimit:500,\n        numStart:1\n      }\n  }\n\n  componentDidMount() {\n    const {numLimit,  numStart} = this.state;\n    fetch(`https://api.unsplash.com/photos?per_page=${numLimit}&client_id=${ClientKey}&${numStart}`)\n    .then(res=>{\n      return res.json()\n    }).then(jsonRes=>{\n      console.log(jsonRes);\n      this.setState({\n        images: jsonRes\n      })\n    })\n  }\n\n  fetchData=()=>{\n    const {numLimit,  numStart} = this.state;\n    this.setState({numStart: this.state.numStart + numLimit})\n    fetch(`https://api.unsplash.com/photos?per_page=${numLimit}&client_id=${ClientKey}&${numStart}`)\n    .then(res=>{\n      return res.json()\n    }).then(jsonRes=>{\n      console.log(jsonRes);\n      this.setState({\n        images: this.state.images.concat(jsonRes)\n      })\n    })\n  }\n\n  search(){\n    fetch(`${pathBase}?per_page=1000&query=${this.field}&client_id=${ClientKey}`)\n    .then(res=>{\n      return res.json()\n    }).then(jsonRes=>{\n      console.log(jsonRes);\n      this.setState({\n        images: jsonRes.results\n      })\n    })\n  }\n\n  valueField(ev){\n    this.field = ev.target.value;\n  }\n\n  images(){\n    return(\n      this.state.images.map(i=>{\n        return (\n          <>\n          <button className=\"buttom-img\"\n            onClick={()=>this.openModal(i.urls.thumb)}>\n            <img\n            src={i.urls.thumb}\n            alt=\"Not Fount\"\n            key={i.id} />\n          </button>\n       </>\n      )\n    })\n    )\n  }\n\n  openModal(urlImg) {\n    console.log(urlImg);\n    this.setState({isModalOpen: true});\n    this.setState({urlImg: urlImg});\n  }\n  \n  closeModal= () =>{\n    this.setState({ isModalOpen: false });\n  }\n  \n  toggleClass() {\n    this.setState({ active: true });\n  }\n  \n  offToggleClass(){\n    this.setState({ active: false })\n  }\n\n   render(){\n      return (\n        <>\n        <header>\n          <nav className=\"nav-container\">\n            <ul className=\"list-nav\">\n              \n              <li>\n                <div className=\"logo-container\">\n                  <i className=\"fab fa-pinterest\"></i>\n                </div>\n              </li>\n                \n              <li>\n                  <div className=\"search-container\">\n                    <div className={this.state.active ? \"border-search\": null}\n                      onClick={this.toggleClass} onMouseLeave={this.offToggleClass}>  \n                      <button onClick={this.search}><i className=\"fas fa-search\"></i></button>\n                      <input type='text' placeholder=\"Buscar\" onChange={this.valueField}/>\n                      <button><i className=\"fas fa-times\"></i></button>\n                    </div>\n                    <div className=\"all-pines\">Todos los pines\n                      <button><i className=\"fas fa-chevron-down\"></i></button>\n                    </div>\n                  </div>\n              </li>\n              \n              <li>\n                <div className=\"friends-container\">\n                  <i className=\"fas fa-user-friends\"></i>\n                </div>\n              </li>\n              \n              <li>\n                <div className=\"user-container\">\n                <i className=\"fas fa-circle\"></i>\n              </div>\n              </li>\n              \n              <li>\n                <div className=\"divisor-container\">\n                  |\n                </div>\n              </li>\n              \n              <li>\n                <div className=\"coment-container\">\n                  <i className=\"fas fa-comment-dots\"></i>\n                </div>\n              </li>\n                \n              <li>\n                <div className=\"bell-container\">\n                  <i className=\"fas fa-bell\"></i>\n                </div>\n              </li>\n              \n              <li>\n                <div className=\"ellipsis-container\">\n                  <i className=\"fas fa-ellipsis-h\"></i>\n                </div>\n              </li>\n                \n            </ul>\n          </nav>\n        </header>\n        \n        <section>\n          <div className=\"center-container\"> \n            <div className=\"img-container\">\n              <InfiniteScroll\n                dataLength={this.state.images.length}\n                next={this.fetchData}\n                hasMore={true}\n                loader={<i className=\"fas fa-spinner\"></i>}\n              >\n                {this.images()}\n              </InfiniteScroll>\n            </div>\n          </div> \n        </section>\n        <Modal isModalOpen={this.state.isModalOpen} urlImg={this.state.urlImg} onClose={this.closeModal}/>\n      </>\n    )\n  }\n}\nexport default Key;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Key from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Key />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}