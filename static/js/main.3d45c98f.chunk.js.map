{"version":3,"sources":["Modal.js","App.js","serviceWorker.js","index.js"],"names":["Modal","ReactDOM","createPortal","className","onClick","this","props","closedModal","document","getElementById","React","Component","ClientKey","Key","field","valueField","bind","search","openModal","closeModal","state","images","isModalOpen","fetch","then","res","json","jsonRes","console","log","setState","results","ev","target","value","map","i","src","urls","thumb","alt","key","id","onClose","type","placeholder","onChange","Boolean","window","location","hostname","match","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kPAiBeA,G,uLAZP,OAAOC,IAASC,aACZ,yBAAKC,UAAU,SACX,6BAASA,UAAU,cACf,+CACA,yDACA,4BAAQC,QAASC,KAAKC,MAAMC,aAA5B,YAGRC,SAASC,eAAe,c,GAVhBC,IAAMC,YCEpBC,G,MAAY,oEA6IHC,E,YAxIb,WAAYP,GAAO,IAAD,8BAChB,4CAAMA,KACCQ,MAAO,GACZ,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBACd,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBACjB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKI,MAAO,CACVC,OAAO,GACPC,aAAa,GATD,E,iFAaG,IAAD,OAClBC,MAAM,2DAAD,OAA4DX,IAChEY,KAAK,SAAAC,GACJ,OAAOA,EAAIC,SACVF,KAAK,SAAAG,GACNC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZT,OAAQM,Q,+BAKL,IAAD,OACNJ,MAAM,GAAD,OA9BQ,yCA8BR,gCAAoClB,KAAKS,MAAzC,sBAA4DF,IAChEY,KAAK,SAAAC,GACJ,OAAOA,EAAIC,SACVF,KAAK,SAAAG,GACNC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZT,OAAQM,EAAQI,c,iCAKXC,GACT3B,KAAKS,MAAQkB,EAAGC,OAAOC,Q,+BAGhB,IAAD,OACN,OAAO7B,KAAKe,MAAMC,OAAOc,IAAI,SAAAC,GAC3B,OACE,oCACE,4BAAQjC,UAAU,aAAaC,QAAS,EAAKc,WAAW,yBAAKmB,IAAKD,EAAEE,KAAKC,MAAOC,IAAI,kBAAkBC,IAAKL,EAAEM,MAC5G,EAAKtB,MAAME,aAAe,kBAAC,EAAD,CAAOqB,QAAS,EAAKxB,kB,kCAOtDd,KAAKyB,SAAS,CAAER,aAAa,M,mCAI7BjB,KAAKyB,SAAS,CAAER,aAAa,M,+BAK3B,OACE,oCACA,gCACE,yBAAKnB,UAAU,iBACb,wBAAIA,UAAU,YAEZ,4BACE,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,uBAIjB,4BACE,yBAAKA,UAAU,oBACb,4BAAQC,QAASC,KAAKY,QAAQ,uBAAGd,UAAU,mBAC3C,2BAAOyC,KAAK,OAAOC,YAAY,SAASC,SAAUzC,KAAKU,aACvD,gCAAQ,uBAAGZ,UAAU,kBACrB,yBAAKA,UAAU,aAAf,kBACE,gCAAQ,uBAAGA,UAAU,4BAK3B,4BACE,yBAAKA,UAAU,qBACb,uBAAGA,UAAU,0BAIjB,4BACE,yBAAKA,UAAU,kBACf,uBAAGA,UAAU,oBAIf,4BACE,yBAAKA,UAAU,qBAAf,MAKF,4BACE,yBAAKA,UAAU,oBACb,uBAAGA,UAAU,0BAIjB,4BACE,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,kBAIjB,4BACE,yBAAKA,UAAU,sBACb,uBAAGA,UAAU,2BAQvB,iCACE,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,iBACZE,KAAKgB,iB,GAlIFX,IAAMC,WCIJoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNlD,IAASmD,OAAO,kBAAC,EAAD,MAAS5C,SAASC,eAAe,SACjDR,IAASmD,OAAO,kBAAC,EAAD,MAAW5C,SAASC,eAAe,UDyH7C,kBAAmB4C,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC,gB","file":"static/js/main.3d45c98f.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\n\r\nclass Modal extends React.Component{\r\n    render(){\r\n        return ReactDOM.createPortal(\r\n            <div className=\"modal\">\r\n                <section className=\"modal-body\">\r\n                    <h1>Modal de Prueba</h1>\r\n                    <p>Modal para las im√°genes</p>\r\n                    <button onClick={this.props.closedModal}>Cerrar</button>\r\n                </section>\r\n            </div>,\r\n            document.getElementById('modal')\r\n        )\r\n    }\r\n}\r\nexport default Modal;\r\n\r\n// class Modal extends React.Component {\r\n//     render () {\r\n//       const { isOpen, onClose } = this.props;\r\n   \r\n//       return (\r\n//         <div className={isOpen ? 'modal modal--is-open' : 'modal'}>\r\n//           <button onClick={onClose}>close</button>\r\n   \r\n//           <p>Hello! I am a modal.</p>\r\n//         </div>\r\n//       );\r\n//     }\r\n//   }\r\n  \r\n//   ReactDOM.render( <Modal />,document.getElementById('react-container'));","import React from 'react';\nimport './App.css';\nimport Modal from './Modal'\nimport '../node_modules/@fortawesome/fontawesome-free/css/all.css';\n\nconst ClientKey = '7df746a39c7d1e29b2c68278355a50da016e7e94816ebfd676628c4456dbc917';\nconst pathBase = 'https://api.unsplash.com/search/photos';\n\nclass Key extends React.Component{\n\n  constructor(props){\n    super(props)\n      this.field ='';\n      this.valueField = this.valueField.bind(this);\n      this.search = this.search.bind(this);\n      this.openModal = this.openModal.bind(this);\n      this.closeModal = this.closeModal.bind(this);\n      this.state= {\n        images:[],\n        isModalOpen: false\n      }\n  }\n\n  componentDidMount() {\n    fetch(`https://api.unsplash.com/photos?per_page=1000&client_id=${ClientKey}`)\n    .then(res=>{\n      return res.json()\n    }).then(jsonRes=>{\n      console.log(jsonRes);\n      this.setState({\n        images: jsonRes\n      })\n    })\n  }\n\n  search(){\n    fetch(`${pathBase}?per_page=1000&query=${this.field}&client_id=${ClientKey}`)\n    .then(res=>{\n      return res.json()\n    }).then(jsonRes=>{\n      console.log(jsonRes);\n      this.setState({\n        images: jsonRes.results\n      })\n    })\n  }\n\n  valueField(ev){\n    this.field = ev.target.value;\n  }\n\n  images(){\n    return this.state.images.map(i=>{\n      return (\n        <>\n          <button className=\"buttom-img\" onClick={this.openModal}><img src={i.urls.thumb} alt=\"No hay imagenes\" key={i.id} /></button>\n          {this.state.isModalOpen && <Modal onClose={this.closeModal}/>}\n       </>\n      )\n    })\n  }\n\n  openModal() {\n    this.setState({ isModalOpen: true})\n  }\n  \n  closeModal () {\n    this.setState({ isModalOpen: false })\n  }\n  \n\n   render(){\n      return (\n        <>\n        <header>\n          <nav className=\"nav-container\">\n            <ul className=\"list-nav\">\n              \n              <li>\n                <div className=\"logo-container\">\n                  <i className=\"fab fa-pinterest\"></i>\n                </div>\n              </li>\n                \n              <li>\n                <div className=\"search-container\">  \n                  <button onClick={this.search}><i className=\"fas fa-search\"></i></button>\n                  <input type='text' placeholder=\"Buscar\" onChange={this.valueField}/>\n                  <button><i className=\"fas fa-times\"></i></button>\n                  <div className=\"all-pines\">Todos los pines\n                    <button><i className=\"fas fa-chevron-down\"></i></button>\n                  </div>\n                </div>\n              </li>\n              \n              <li>\n                <div className=\"friends-container\">\n                  <i className=\"fas fa-user-friends\"></i>\n                </div>\n              </li>\n              \n              <li>\n                <div className=\"user-container\">\n                <i className=\"fas fa-circle\"></i>\n              </div>\n              </li>\n              \n              <li>\n                <div className=\"divisor-container\">\n                  |\n                </div>\n              </li>\n              \n              <li>\n                <div className=\"coment-container\">\n                  <i className=\"fas fa-comment-dots\"></i>\n                </div>\n              </li>\n                \n              <li>\n                <div className=\"bell-container\">\n                  <i className=\"fas fa-bell\"></i>\n                </div>\n              </li>\n              \n              <li>\n                <div className=\"ellipsis-container\">\n                  <i className=\"fas fa-ellipsis-h\"></i>\n                </div>\n              </li>\n                \n            </ul>\n          </nav>\n        </header>\n        \n        <section>\n          <div className=\"center-container\"> \n            <div className=\"img-container\">\n              {this.images()}\n            </div>\n          </div> \n        </section> \n      </>\n    )\n  }\n}\nexport default Key;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Key from './App';\nimport Modal from './Modal';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Key />, document.getElementById('root'));\nReactDOM.render(<Modal />, document.getElementById('modal'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}